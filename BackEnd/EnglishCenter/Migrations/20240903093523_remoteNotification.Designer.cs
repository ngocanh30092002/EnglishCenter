// <auto-generated />
using System;
using EnglishCenter.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnglishCenter.Migrations
{
    [DbContext(typeof(EnglishCenterContext))]
    [Migration("20240903093523_remoteNotification")]
    partial class remoteNotification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EnglishCenter.Models.AnswerSheet", b =>
                {
                    b.Property<long>("AnswerSheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnswerSheetId"));

                    b.Property<string>("AnswerString")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly?>("AttendDate")
                        .HasColumnType("date");

                    b.Property<int?>("CorrectNum")
                        .HasColumnType("int");

                    b.Property<int?>("FalseNum")
                        .HasColumnType("int");

                    b.Property<long?>("StuInClassId")
                        .HasColumnType("bigint");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time");

                    b.HasKey("AnswerSheetId");

                    b.HasIndex("AttendDate", "StuInClassId");

                    b.ToTable("AnswerSheet");
                });

            modelBuilder.Entity("EnglishCenter.Models.AssignQue", b =>
                {
                    b.Property<long>("AssignQuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AssignQuesId"));

                    b.Property<string>("AssignmentId")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<long?>("QuesId")
                        .HasColumnType("bigint")
                        .HasColumnName("Ques_Id");

                    b.Property<int?>("QuesTypeId")
                        .HasColumnType("int");

                    b.HasKey("AssignQuesId");

                    b.HasIndex("QuesTypeId");

                    b.HasIndex(new[] { "QuesId" }, "IX_Assign_Ques")
                        .IsUnique()
                        .HasFilter("[Ques_Id] IS NOT NULL");

                    b.ToTable("Assign_Ques");
                });

            modelBuilder.Entity("EnglishCenter.Models.Assignment", b =>
                {
                    b.Property<string>("AssignmentId")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CourseId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("EnglishCenter.Models.Attendance", b =>
                {
                    b.Property<DateOnly>("AttendDate")
                        .HasColumnType("date");

                    b.Property<long>("StuClassInId")
                        .HasColumnType("bigint");

                    b.Property<string>("AssignmentId")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsAttended")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLated")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLeaved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPermited")
                        .HasColumnType("bit");

                    b.Property<int?>("LessionNum")
                        .HasColumnType("int");

                    b.Property<int?>("StatusAssignment")
                        .HasColumnType("int");

                    b.HasKey("AttendDate", "StuClassInId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StuClassInId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("EnglishCenter.Models.Class", b =>
                {
                    b.Property<string>("ClassId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("MaxNum")
                        .HasColumnType("int");

                    b.Property<int?>("RegisteredNum")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("TeacherId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ClassId");

                    b.HasIndex("CourseId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("EnglishCenter.Models.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("EntryPoint")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NumLession")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("StandardPoint")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EnglishCenter.Models.EnrollStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("EnrollStatus");
                });

            modelBuilder.Entity("EnglishCenter.Models.Enrollment", b =>
                {
                    b.Property<long>("EnrollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EnrollId"));

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClassId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateOnly?>("EnrollDate")
                        .HasColumnType("date");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("EnrollId", "UserId", "ClassId");

                    b.HasIndex("ClassId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("EnglishCenter.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("EnglishCenter.Models.QuesLcAudio", b =>
                {
                    b.Property<long>("QuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuesId"));

                    b.Property<string>("Audio")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("QuesId");

                    b.ToTable("Ques_LC_Audio");
                });

            modelBuilder.Entity("EnglishCenter.Models.QuesLcConversation", b =>
                {
                    b.Property<long>("QuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuesId"));

                    b.Property<string>("Audio")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("QuesId");

                    b.ToTable("Ques_LC_Conversation");
                });

            modelBuilder.Entity("EnglishCenter.Models.QuesLcImage", b =>
                {
                    b.Property<long>("QuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuesId"));

                    b.Property<string>("Audio")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("QuesId");

                    b.ToTable("Ques_LC_Image");
                });

            modelBuilder.Entity("EnglishCenter.Models.QuesRcDouble", b =>
                {
                    b.Property<long>("QuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuesId"));

                    b.Property<string>("Image1")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Image_1");

                    b.Property<string>("Image2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Image_2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("QuesId");

                    b.ToTable("Ques_RC_Double");
                });

            modelBuilder.Entity("EnglishCenter.Models.QuesRcSingle", b =>
                {
                    b.Property<long>("QuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuesId"));

                    b.Property<string>("AnswerA")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerB")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerC")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerD")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuesId");

                    b.ToTable("Ques_RC_Single");
                });

            modelBuilder.Entity("EnglishCenter.Models.QuesRcTriple", b =>
                {
                    b.Property<long>("QuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuesId"));

                    b.Property<string>("Image1")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Image_1");

                    b.Property<string>("Image2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Image_2");

                    b.Property<string>("Image3")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Image_3");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("QuesId");

                    b.ToTable("Ques_RC_Triple");
                });

            modelBuilder.Entity("EnglishCenter.Models.QuestionType", b =>
                {
                    b.Property<int>("QuesTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TableName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("QuesTypeId");

                    b.ToTable("Question_Type");
                });

            modelBuilder.Entity("EnglishCenter.Models.ScoreHistory", b =>
                {
                    b.Property<long>("ScoreHisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ScoreHisId"));

                    b.Property<int?>("EntrancePoint")
                        .HasColumnType("int");

                    b.Property<int?>("FinalPoint")
                        .HasColumnType("int");

                    b.Property<int?>("MidtermPoint")
                        .HasColumnType("int");

                    b.HasKey("ScoreHisId")
                        .HasName("PK_Table_1");

                    b.ToTable("ScoreHistory");
                });

            modelBuilder.Entity("EnglishCenter.Models.StuInClass", b =>
                {
                    b.Property<long>("StuInClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StuInClassId"));

                    b.Property<string>("ClassId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long?>("ScoreHisId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StuInClassId");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ScoreHisId" }, "IX_StuInClass")
                        .IsUnique()
                        .HasFilter("[ScoreHisId] IS NOT NULL");

                    b.ToTable("StuInClass");
                });

            modelBuilder.Entity("EnglishCenter.Models.Student", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EnglishCenter.Models.SubLcConversation", b =>
                {
                    b.Property<long>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SubId"));

                    b.Property<string>("AnswerA")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerB")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerC")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerD")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("PreQuesId")
                        .HasColumnType("bigint");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubId");

                    b.HasIndex("PreQuesId");

                    b.ToTable("Sub_LC_Conversation");
                });

            modelBuilder.Entity("EnglishCenter.Models.SubRcDouble", b =>
                {
                    b.Property<long>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SubId"));

                    b.Property<string>("AnswerA")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerB")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerC")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerD")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("PreQuesId")
                        .HasColumnType("bigint");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubId");

                    b.HasIndex("PreQuesId");

                    b.ToTable("Sub_RC_Double");
                });

            modelBuilder.Entity("EnglishCenter.Models.SubRcTriple", b =>
                {
                    b.Property<long>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SubId"));

                    b.Property<string>("AnswerA")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerB")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerC")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerD")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("PreQuesId")
                        .HasColumnType("bigint");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubId");

                    b.HasIndex("PreQuesId");

                    b.ToTable("Sub_RC_Triple");
                });

            modelBuilder.Entity("EnglishCenter.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GroupStudent", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupStudent", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("EnglishCenter.Models.AnswerSheet", b =>
                {
                    b.HasOne("EnglishCenter.Models.Attendance", "Attendance")
                        .WithMany("AnswerSheets")
                        .HasForeignKey("AttendDate", "StuInClassId")
                        .HasConstraintName("FK_AnswerSheet_Attendance");

                    b.Navigation("Attendance");
                });

            modelBuilder.Entity("EnglishCenter.Models.AssignQue", b =>
                {
                    b.HasOne("EnglishCenter.Models.QuesLcAudio", "Ques")
                        .WithOne("AssignQue")
                        .HasForeignKey("EnglishCenter.Models.AssignQue", "QuesId")
                        .HasConstraintName("FK_Assign_Ques_Ques_LC_Audio");

                    b.HasOne("EnglishCenter.Models.QuesLcConversation", "QuesNavigation")
                        .WithOne("AssignQue")
                        .HasForeignKey("EnglishCenter.Models.AssignQue", "QuesId")
                        .HasConstraintName("FK_Assign_Ques_Ques_LC_Conversation");

                    b.HasOne("EnglishCenter.Models.QuesLcImage", "Ques1")
                        .WithOne("AssignQue")
                        .HasForeignKey("EnglishCenter.Models.AssignQue", "QuesId")
                        .HasConstraintName("FK_Assign_Ques_Assignment");

                    b.HasOne("EnglishCenter.Models.QuesRcDouble", "Ques2")
                        .WithOne("AssignQue")
                        .HasForeignKey("EnglishCenter.Models.AssignQue", "QuesId")
                        .HasConstraintName("FK_Assign_Ques_Ques_RC_Double");

                    b.HasOne("EnglishCenter.Models.QuesRcSingle", "Ques3")
                        .WithOne("AssignQue")
                        .HasForeignKey("EnglishCenter.Models.AssignQue", "QuesId")
                        .HasConstraintName("FK_Assign_Ques_Ques_RC_Single");

                    b.HasOne("EnglishCenter.Models.QuesRcTriple", "Ques4")
                        .WithOne("AssignQue")
                        .HasForeignKey("EnglishCenter.Models.AssignQue", "QuesId")
                        .HasConstraintName("FK_Assign_Ques_Ques_RC_Triple");

                    b.HasOne("EnglishCenter.Models.QuestionType", "QuesType")
                        .WithMany("AssignQues")
                        .HasForeignKey("QuesTypeId")
                        .HasConstraintName("FK_Assign_Ques_Question_Type");

                    b.Navigation("Ques");

                    b.Navigation("Ques1");

                    b.Navigation("Ques2");

                    b.Navigation("Ques3");

                    b.Navigation("Ques4");

                    b.Navigation("QuesNavigation");

                    b.Navigation("QuesType");
                });

            modelBuilder.Entity("EnglishCenter.Models.Assignment", b =>
                {
                    b.HasOne("EnglishCenter.Models.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Assignment_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EnglishCenter.Models.Attendance", b =>
                {
                    b.HasOne("EnglishCenter.Models.Assignment", "Assignment")
                        .WithMany("Attendances")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("FK_Attendance_Assignment");

                    b.HasOne("EnglishCenter.Models.StuInClass", "StuClassIn")
                        .WithMany("Attendances")
                        .HasForeignKey("StuClassInId")
                        .IsRequired()
                        .HasConstraintName("FK_Attendance_StuInClass");

                    b.Navigation("Assignment");

                    b.Navigation("StuClassIn");
                });

            modelBuilder.Entity("EnglishCenter.Models.Class", b =>
                {
                    b.HasOne("EnglishCenter.Models.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Classes_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EnglishCenter.Models.Enrollment", b =>
                {
                    b.HasOne("EnglishCenter.Models.Class", "Class")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Enrollment_Classes");

                    b.HasOne("EnglishCenter.Models.EnrollStatus", "Status")
                        .WithMany("Enrollments")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Enrollment_EnrollStatus");

                    b.HasOne("EnglishCenter.Models.Student", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Enrollment_Students");

                    b.Navigation("Class");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishCenter.Models.StuInClass", b =>
                {
                    b.HasOne("EnglishCenter.Models.Class", "Class")
                        .WithMany("StuInClasses")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_StuInClass_Classes");

                    b.HasOne("EnglishCenter.Models.ScoreHistory", "ScoreHis")
                        .WithOne("StuInClass")
                        .HasForeignKey("EnglishCenter.Models.StuInClass", "ScoreHisId")
                        .HasConstraintName("FK_StuInClass_ScoreHistory");

                    b.HasOne("EnglishCenter.Models.Student", "User")
                        .WithMany("StuInClasses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_StuInClass_Students");

                    b.Navigation("Class");

                    b.Navigation("ScoreHis");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishCenter.Models.Student", b =>
                {
                    b.HasOne("EnglishCenter.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("EnglishCenter.Models.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Students_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishCenter.Models.SubLcConversation", b =>
                {
                    b.HasOne("EnglishCenter.Models.QuesLcConversation", "PreQues")
                        .WithMany("SubLcConversations")
                        .HasForeignKey("PreQuesId")
                        .IsRequired()
                        .HasConstraintName("FK_Sub_LC_Conversation_Ques_LC_Conversation");

                    b.Navigation("PreQues");
                });

            modelBuilder.Entity("EnglishCenter.Models.SubRcDouble", b =>
                {
                    b.HasOne("EnglishCenter.Models.QuesRcDouble", "PreQues")
                        .WithMany("SubRcDoubles")
                        .HasForeignKey("PreQuesId")
                        .IsRequired()
                        .HasConstraintName("FK_Sub_RC_Double_Ques_RC_Double");

                    b.Navigation("PreQues");
                });

            modelBuilder.Entity("EnglishCenter.Models.SubRcTriple", b =>
                {
                    b.HasOne("EnglishCenter.Models.QuesRcTriple", "PreQues")
                        .WithMany("SubRcTriples")
                        .HasForeignKey("PreQuesId")
                        .IsRequired()
                        .HasConstraintName("FK_Sub_RC_Triple_Ques_RC_Triple");

                    b.Navigation("PreQues");
                });

            modelBuilder.Entity("GroupStudent", b =>
                {
                    b.HasOne("EnglishCenter.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnglishCenter.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EnglishCenter.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EnglishCenter.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnglishCenter.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EnglishCenter.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EnglishCenter.Models.Assignment", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("EnglishCenter.Models.Attendance", b =>
                {
                    b.Navigation("AnswerSheets");
                });

            modelBuilder.Entity("EnglishCenter.Models.Class", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("StuInClasses");
                });

            modelBuilder.Entity("EnglishCenter.Models.Course", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Classes");
                });

            modelBuilder.Entity("EnglishCenter.Models.EnrollStatus", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("EnglishCenter.Models.QuesLcAudio", b =>
                {
                    b.Navigation("AssignQue");
                });

            modelBuilder.Entity("EnglishCenter.Models.QuesLcConversation", b =>
                {
                    b.Navigation("AssignQue");

                    b.Navigation("SubLcConversations");
                });

            modelBuilder.Entity("EnglishCenter.Models.QuesLcImage", b =>
                {
                    b.Navigation("AssignQue");
                });

            modelBuilder.Entity("EnglishCenter.Models.QuesRcDouble", b =>
                {
                    b.Navigation("AssignQue");

                    b.Navigation("SubRcDoubles");
                });

            modelBuilder.Entity("EnglishCenter.Models.QuesRcSingle", b =>
                {
                    b.Navigation("AssignQue");
                });

            modelBuilder.Entity("EnglishCenter.Models.QuesRcTriple", b =>
                {
                    b.Navigation("AssignQue");

                    b.Navigation("SubRcTriples");
                });

            modelBuilder.Entity("EnglishCenter.Models.QuestionType", b =>
                {
                    b.Navigation("AssignQues");
                });

            modelBuilder.Entity("EnglishCenter.Models.ScoreHistory", b =>
                {
                    b.Navigation("StuInClass");
                });

            modelBuilder.Entity("EnglishCenter.Models.StuInClass", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("EnglishCenter.Models.Student", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("StuInClasses");
                });

            modelBuilder.Entity("EnglishCenter.Models.User", b =>
                {
                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
