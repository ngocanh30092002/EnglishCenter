// <auto-generated />
using System;
using EnglishCenter.DataAccess.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnglishCenter.Migrations
{
    [DbContext(typeof(EnglishCenterContext))]
    [Migration("20241004035443_removeIndex")]
    partial class removeIndex
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.AssignQue", b =>
                {
                    b.Property<long>("AssignQuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AssignQuesId"));

                    b.Property<long?>("AssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuesId")
                        .HasColumnType("bigint")
                        .HasColumnName("Ques_Id");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AssignQuesId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("QuesId")
                        .IsUnique()
                        .HasFilter("[Ques_Id] IS NOT NULL");

                    b.ToTable("Assign_Ques");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Assignment", b =>
                {
                    b.Property<long>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AssignmentId"));

                    b.Property<long>("CourseContentId")
                        .HasColumnType("bigint");

                    b.Property<int>("NoNum")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CourseContentId");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Attendance", b =>
                {
                    b.Property<long>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AttendanceId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool?>("IsAttended")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLate")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLeaved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPermitted")
                        .HasColumnType("bit");

                    b.HasKey("AttendanceId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Class", b =>
                {
                    b.Property<string>("ClassId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MaxNum")
                        .HasColumnType("int");

                    b.Property<int>("RegisteredNum")
                        .HasColumnType("int");

                    b.Property<int>("RegisteringNum")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TeacherId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ClassId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("EntryPoint")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ImageThumbnail")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NumLesson")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("StandardPoint")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.CourseContent", b =>
                {
                    b.Property<long>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ContentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("NoNum")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ContentId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseContents");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.EnrollStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("EnrollStatus");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Enrollment", b =>
                {
                    b.Property<long>("EnrollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EnrollId"));

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateOnly?>("EnrollDate")
                        .HasColumnType("date");

                    b.Property<long?>("ScoreHisId")
                        .HasColumnType("bigint");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EnrollId");

                    b.HasIndex("ClassId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ScoreHisId" }, "IX_Enrollment")
                        .IsUnique()
                        .HasFilter("[ScoreHisId] IS NOT NULL");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Homework", b =>
                {
                    b.Property<long>("HomeworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("HomeworkId"));

                    b.Property<long?>("AnswerSheetId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AttendanceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.HasKey("HomeworkId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("AttendanceId");

                    b.ToTable("Homework");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.NotiStudent", b =>
                {
                    b.Property<long>("NotiStuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotiStuId"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<long>("NotiId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("NotiStuId");

                    b.HasIndex("NotiId");

                    b.HasIndex("UserId");

                    b.ToTable("NotiStudents");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Notification", b =>
                {
                    b.Property<long>("NotiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotiId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LinkUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("NotiId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.QuesLcAudio", b =>
                {
                    b.Property<long>("QuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuesId"));

                    b.Property<string>("Audio")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("QuesId");

                    b.ToTable("Ques_LC_Audio");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.QuesLcConversation", b =>
                {
                    b.Property<long>("QuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuesId"));

                    b.Property<string>("Audio")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("QuesId");

                    b.ToTable("Ques_LC_Conversation");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.QuesLcImage", b =>
                {
                    b.Property<long>("QuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuesId"));

                    b.Property<string>("Audio")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("QuesId");

                    b.ToTable("Ques_LC_Image");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.QuesRcDouble", b =>
                {
                    b.Property<long>("QuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuesId"));

                    b.Property<string>("Image1")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Image_1");

                    b.Property<string>("Image2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Image_2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("QuesId");

                    b.ToTable("Ques_RC_Double");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.QuesRcSingle", b =>
                {
                    b.Property<long>("QuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuesId"));

                    b.Property<string>("AnswerA")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerB")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerC")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerD")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuesId");

                    b.ToTable("Ques_RC_Single");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.QuesRcTriple", b =>
                {
                    b.Property<long>("QuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuesId"));

                    b.Property<string>("Image1")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Image_1");

                    b.Property<string>("Image2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Image_2");

                    b.Property<string>("Image3")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Image_3");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("QuesId");

                    b.ToTable("Ques_RC_Triple");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.ScheduleEvent", b =>
                {
                    b.Property<long>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ScheduleId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("ScheduleEvents");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.ScoreHistory", b =>
                {
                    b.Property<long>("ScoreHisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ScoreHisId"));

                    b.Property<int?>("EntrancePoint")
                        .HasColumnType("int");

                    b.Property<int?>("FinalPoint")
                        .HasColumnType("int");

                    b.Property<int?>("MidtermPoint")
                        .HasColumnType("int");

                    b.HasKey("ScoreHisId")
                        .HasName("PK_Table_1");

                    b.ToTable("ScoreHistory");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Student", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BackgroundImage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.SubLcConversation", b =>
                {
                    b.Property<long>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SubId"));

                    b.Property<string>("AnswerA")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerB")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerC")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerD")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("PreQuesId")
                        .HasColumnType("bigint");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubId");

                    b.HasIndex("PreQuesId");

                    b.ToTable("Sub_LC_Conversation");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.SubRcDouble", b =>
                {
                    b.Property<long>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SubId"));

                    b.Property<string>("AnswerA")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerB")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerC")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerD")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("PreQuesId")
                        .HasColumnType("bigint");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubId");

                    b.HasIndex("PreQuesId");

                    b.ToTable("Sub_RC_Double");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.SubRcTriple", b =>
                {
                    b.Property<long>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SubId"));

                    b.Property<string>("AnswerA")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerB")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerC")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AnswerD")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("PreQuesId")
                        .HasColumnType("bigint");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubId");

                    b.HasIndex("PreQuesId");

                    b.ToTable("Sub_RC_Triple");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Teacher", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BackgroundImage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GroupStudent", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupStudent", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.AssignQue", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.Assignment", "Assignment")
                        .WithMany("AssignQues")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("FK_Assign_Ques_Assignment");

                    b.HasOne("EnglishCenter.DataAccess.Entities.QuesLcAudio", "QuesAudio")
                        .WithOne("AssignQue")
                        .HasForeignKey("EnglishCenter.DataAccess.Entities.AssignQue", "QuesId")
                        .HasConstraintName("FK_Assign_Ques_Ques_LC_Audio");

                    b.HasOne("EnglishCenter.DataAccess.Entities.QuesLcConversation", "QuesConversation")
                        .WithOne("AssignQue")
                        .HasForeignKey("EnglishCenter.DataAccess.Entities.AssignQue", "QuesId")
                        .HasConstraintName("FK_Assign_Ques_Ques_LC_Conversation");

                    b.HasOne("EnglishCenter.DataAccess.Entities.QuesLcImage", "QuesImage")
                        .WithOne("AssignQue")
                        .HasForeignKey("EnglishCenter.DataAccess.Entities.AssignQue", "QuesId")
                        .HasConstraintName("FK_Assign_Ques_Ques_LC_Image");

                    b.HasOne("EnglishCenter.DataAccess.Entities.QuesRcDouble", "QuesDouble")
                        .WithOne("AssignQue")
                        .HasForeignKey("EnglishCenter.DataAccess.Entities.AssignQue", "QuesId")
                        .HasConstraintName("FK_Assign_Ques_Ques_RC_Double");

                    b.HasOne("EnglishCenter.DataAccess.Entities.QuesRcSingle", "QuesSingle")
                        .WithOne("AssignQue")
                        .HasForeignKey("EnglishCenter.DataAccess.Entities.AssignQue", "QuesId")
                        .HasConstraintName("FK_Assign_Ques_Ques_RC_Single");

                    b.HasOne("EnglishCenter.DataAccess.Entities.QuesRcTriple", "QuesTriple")
                        .WithOne("AssignQue")
                        .HasForeignKey("EnglishCenter.DataAccess.Entities.AssignQue", "QuesId")
                        .HasConstraintName("FK_Assign_Ques_Ques_RC_Triple");

                    b.Navigation("Assignment");

                    b.Navigation("QuesAudio");

                    b.Navigation("QuesConversation");

                    b.Navigation("QuesDouble");

                    b.Navigation("QuesImage");

                    b.Navigation("QuesSingle");

                    b.Navigation("QuesTriple");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Assignment", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.CourseContent", "CourseContent")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Assignment_CourseContent");

                    b.Navigation("CourseContent");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Class", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Classes_Courses");

                    b.HasOne("EnglishCenter.DataAccess.Entities.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Classes_Teachers");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.CourseContent", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.Course", "Course")
                        .WithMany("CourseContents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CourseContent_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Enrollment", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.Class", "Class")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Enrollment_Classes");

                    b.HasOne("EnglishCenter.DataAccess.Entities.ScoreHistory", "ScoreHis")
                        .WithOne("Enrollment")
                        .HasForeignKey("EnglishCenter.DataAccess.Entities.Enrollment", "ScoreHisId")
                        .HasConstraintName("FK_Enrollment_ScoreHis");

                    b.HasOne("EnglishCenter.DataAccess.Entities.EnrollStatus", "Status")
                        .WithMany("Enrollments")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Enrollment_EnrollStatus");

                    b.HasOne("EnglishCenter.DataAccess.Entities.Student", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Enrollment_Students");

                    b.Navigation("Class");

                    b.Navigation("ScoreHis");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Homework", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.Assignment", "Assignment")
                        .WithMany("HomeworkList")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("FK_Homework_Assignment");

                    b.HasOne("EnglishCenter.DataAccess.Entities.Attendance", "Attendance")
                        .WithMany("HomeworkList")
                        .HasForeignKey("AttendanceId")
                        .HasConstraintName("FK_Homework_Attendance");

                    b.Navigation("Assignment");

                    b.Navigation("Attendance");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.NotiStudent", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.Notification", "Notification")
                        .WithMany("NotiStudents")
                        .HasForeignKey("NotiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotiStudent_Notifications");

                    b.HasOne("EnglishCenter.DataAccess.Entities.Student", "Student")
                        .WithMany("NotiStudents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotiStudent_Students");

                    b.Navigation("Notification");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.ScheduleEvent", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.Student", "Student")
                        .WithMany("ScheduleEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Student", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("EnglishCenter.DataAccess.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Students_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.SubLcConversation", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.QuesLcConversation", "PreQues")
                        .WithMany("SubLcConversations")
                        .HasForeignKey("PreQuesId")
                        .IsRequired()
                        .HasConstraintName("FK_Sub_LC_Conversation_Ques_LC_Conversation");

                    b.Navigation("PreQues");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.SubRcDouble", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.QuesRcDouble", "PreQues")
                        .WithMany("SubRcDoubles")
                        .HasForeignKey("PreQuesId")
                        .IsRequired()
                        .HasConstraintName("FK_Sub_RC_Double_Ques_RC_Double");

                    b.Navigation("PreQues");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.SubRcTriple", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.QuesRcTriple", "PreQues")
                        .WithMany("SubRcTriples")
                        .HasForeignKey("PreQuesId")
                        .IsRequired()
                        .HasConstraintName("FK_Sub_RC_Triple_Ques_RC_Triple");

                    b.Navigation("PreQues");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Teacher", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("EnglishCenter.DataAccess.Entities.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Teachers_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GroupStudent", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnglishCenter.DataAccess.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnglishCenter.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EnglishCenter.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Assignment", b =>
                {
                    b.Navigation("AssignQues");

                    b.Navigation("HomeworkList");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Attendance", b =>
                {
                    b.Navigation("HomeworkList");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Class", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Course", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("CourseContents");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.CourseContent", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.EnrollStatus", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Notification", b =>
                {
                    b.Navigation("NotiStudents");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.QuesLcAudio", b =>
                {
                    b.Navigation("AssignQue");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.QuesLcConversation", b =>
                {
                    b.Navigation("AssignQue");

                    b.Navigation("SubLcConversations");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.QuesLcImage", b =>
                {
                    b.Navigation("AssignQue");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.QuesRcDouble", b =>
                {
                    b.Navigation("AssignQue");

                    b.Navigation("SubRcDoubles");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.QuesRcSingle", b =>
                {
                    b.Navigation("AssignQue");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.QuesRcTriple", b =>
                {
                    b.Navigation("AssignQue");

                    b.Navigation("SubRcTriples");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.ScoreHistory", b =>
                {
                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Student", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("NotiStudents");

                    b.Navigation("ScheduleEvents");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.Teacher", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("EnglishCenter.DataAccess.Entities.User", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
