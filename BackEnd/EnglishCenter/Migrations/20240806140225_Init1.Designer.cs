// <auto-generated />
using System;
using EnglishCenter.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnglishCenter.Migrations
{
    [DbContext(typeof(EnglishCenterContext))]
    [Migration("20240806140225_Init1")]
    partial class Init1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EnglishCenter.Models.Attendance", b =>
                {
                    b.Property<DateTime>("AttendDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StuClassId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAttended")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLated")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLeaved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPermited")
                        .HasColumnType("bit");

                    b.Property<string>("LinkAssignment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StatusAssignment")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("AttendDate", "StuClassId");

                    b.HasIndex("StuClassId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("EnglishCenter.Models.Class", b =>
                {
                    b.Property<string>("ClassId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RegisteredNum")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("ClassId");

                    b.HasIndex("CourseId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("EnglishCenter.Models.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntryPoint")
                        .HasColumnType("int");

                    b.Property<decimal>("Fee")
                        .HasColumnType("money");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StandardPoint")
                        .HasColumnType("int");

                    b.HasKey("CourseId")
                        .HasName("PK_Course_ID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EnglishCenter.Models.Enrollment", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CourseId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("EnrollDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("EnglishCenter.Models.PreExamScore", b =>
                {
                    b.Property<int>("PreScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreScoreId"));

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("EntrancePoint")
                        .HasColumnType("int");

                    b.Property<int?>("FinalPoint")
                        .HasColumnType("int");

                    b.Property<int?>("MidtermPoint")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PreScoreId")
                        .HasName("PK_PreExamScores_1");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("PreExamScores");
                });

            modelBuilder.Entity("EnglishCenter.Models.Student", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK_Student_ID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EnglishCenter.Models.StudentInClass", b =>
                {
                    b.Property<int>("StuClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StuClassId"));

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("PreScoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StuClassId")
                        .HasName("PK_StudentInClass_1");

                    b.HasIndex(new[] { "PreScoreId" }, "IX_StudentInClass")
                        .IsUnique();

                    b.ToTable("StudentInClass");
                });

            modelBuilder.Entity("EnglishCenter.Models.SubQuestion3", b =>
                {
                    b.Property<int>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubId"));

                    b.Property<int>("PreId")
                        .HasColumnType("int");

                    b.Property<string>("AnswerA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectAnswer")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("NumNo")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubId", "PreId");

                    b.HasIndex("PreId");

                    b.ToTable("SubQuestion3");
                });

            modelBuilder.Entity("EnglishCenter.Models.SubQuestion4", b =>
                {
                    b.Property<int>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubId"));

                    b.Property<int>("PreId")
                        .HasColumnType("int");

                    b.Property<string>("AnswerA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectAnswer")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("NumNo")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubId", "PreId");

                    b.HasIndex("PreId");

                    b.ToTable("SubQuestion4");
                });

            modelBuilder.Entity("EnglishCenter.Models.SubQuestion6", b =>
                {
                    b.Property<int>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubId"));

                    b.Property<string>("AnswerA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectAnswer")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("NumNo")
                        .HasColumnType("int");

                    b.Property<int?>("PreId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubId");

                    b.HasIndex("PreId");

                    b.ToTable("SubQuestion6");
                });

            modelBuilder.Entity("EnglishCenter.Models.SubQuestion7", b =>
                {
                    b.Property<int>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubId"));

                    b.Property<string>("AnswerA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectAnswer")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("NumNo")
                        .HasColumnType("int");

                    b.Property<int?>("PreId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubId");

                    b.HasIndex("PreId");

                    b.ToTable("SubQuestion7");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicExam", b =>
                {
                    b.Property<string>("ToeicId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SerialNum")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ToeicId");

                    b.ToTable("ToeicExams");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Audio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectAnswer")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ImageLink")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NumNo")
                        .HasColumnType("int");

                    b.Property<string>("ToeicId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ToeicId");

                    b.ToTable("Toeic_Part_1");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Audio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectAnswer")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("NumNo")
                        .HasColumnType("int");

                    b.Property<string>("ToeicId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ToeicId");

                    b.ToTable("Toeic_Part_2");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Audio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NumNo")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ToeicId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ToeicId");

                    b.ToTable("Toeic_Part_3");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart4", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Audio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NumNo")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ToeicId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ToeicId");

                    b.ToTable("Toeic_Part_4");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart5", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectAnswer")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("NumNo")
                        .HasColumnType("int");

                    b.Property<string>("ToeicId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ToeicId");

                    b.ToTable("Toeic_Part_5");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart6", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageLink")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NumNo")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ToeicId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ToeicId");

                    b.ToTable("Toeic_Part_6");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart7", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageLink1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ImageLink_1");

                    b.Property<string>("ImageLink2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ImageLink_2");

                    b.Property<string>("ImageLink3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ImageLink_3");

                    b.Property<int?>("NumNo")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ToeicId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ToeicId");

                    b.ToTable("Toeic_Part_7");
                });

            modelBuilder.Entity("EnglishCenter.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("EnglishCenter.Models.Attendance", b =>
                {
                    b.HasOne("EnglishCenter.Models.StudentInClass", "StuClass")
                        .WithMany("Attendances")
                        .HasForeignKey("StuClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Attendance_StudentInClass");

                    b.Navigation("StuClass");
                });

            modelBuilder.Entity("EnglishCenter.Models.Class", b =>
                {
                    b.HasOne("EnglishCenter.Models.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Courses_Classes");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EnglishCenter.Models.Enrollment", b =>
                {
                    b.HasOne("EnglishCenter.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Enrollment_Courses");

                    b.HasOne("EnglishCenter.Models.Student", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Enrollment_Students");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishCenter.Models.PreExamScore", b =>
                {
                    b.HasOne("EnglishCenter.Models.Course", "Course")
                        .WithMany("PreExamScores")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_PreExamScores_Courses");

                    b.HasOne("EnglishCenter.Models.Student", "User")
                        .WithMany("PreExamScores")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PreExamScores_Students");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishCenter.Models.Student", b =>
                {
                    b.HasOne("EnglishCenter.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("EnglishCenter.Models.Student", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishCenter.Models.StudentInClass", b =>
                {
                    b.HasOne("EnglishCenter.Models.PreExamScore", "PreScore")
                        .WithOne("StudentInClass")
                        .HasForeignKey("EnglishCenter.Models.StudentInClass", "PreScoreId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentInClass_PreExamScores");

                    b.Navigation("PreScore");
                });

            modelBuilder.Entity("EnglishCenter.Models.SubQuestion3", b =>
                {
                    b.HasOne("EnglishCenter.Models.ToeicPart3", "Pre")
                        .WithMany("SubQuestion3s")
                        .HasForeignKey("PreId")
                        .IsRequired()
                        .HasConstraintName("FK_SubQuestion3_Toeic_Part_3");

                    b.Navigation("Pre");
                });

            modelBuilder.Entity("EnglishCenter.Models.SubQuestion4", b =>
                {
                    b.HasOne("EnglishCenter.Models.ToeicPart4", "Pre")
                        .WithMany("SubQuestion4s")
                        .HasForeignKey("PreId")
                        .IsRequired()
                        .HasConstraintName("FK_SubQuestion4_Toeic_Part_4");

                    b.Navigation("Pre");
                });

            modelBuilder.Entity("EnglishCenter.Models.SubQuestion6", b =>
                {
                    b.HasOne("EnglishCenter.Models.ToeicPart6", "Pre")
                        .WithMany("SubQuestion6s")
                        .HasForeignKey("PreId")
                        .HasConstraintName("FK_SubQuestion6_Toeic_Part_6");

                    b.Navigation("Pre");
                });

            modelBuilder.Entity("EnglishCenter.Models.SubQuestion7", b =>
                {
                    b.HasOne("EnglishCenter.Models.ToeicPart7", "Pre")
                        .WithMany("SubQuestion7s")
                        .HasForeignKey("PreId")
                        .HasConstraintName("FK_SubQuestion7_Toeic_Part_7");

                    b.Navigation("Pre");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart1", b =>
                {
                    b.HasOne("EnglishCenter.Models.ToeicExam", "Toeic")
                        .WithMany("ToeicPart1s")
                        .HasForeignKey("ToeicId")
                        .IsRequired()
                        .HasConstraintName("FK_Toeic_Part_1_ToeicExams");

                    b.Navigation("Toeic");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart2", b =>
                {
                    b.HasOne("EnglishCenter.Models.ToeicExam", "Toeic")
                        .WithMany("ToeicPart2s")
                        .HasForeignKey("ToeicId")
                        .IsRequired()
                        .HasConstraintName("FK_Toeic_Part_2_ToeicExams");

                    b.Navigation("Toeic");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart3", b =>
                {
                    b.HasOne("EnglishCenter.Models.ToeicExam", "Toeic")
                        .WithMany("ToeicPart3s")
                        .HasForeignKey("ToeicId")
                        .IsRequired()
                        .HasConstraintName("FK_Toeic_Part_3_ToeicExams");

                    b.Navigation("Toeic");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart4", b =>
                {
                    b.HasOne("EnglishCenter.Models.ToeicExam", "Toeic")
                        .WithMany("ToeicPart4s")
                        .HasForeignKey("ToeicId")
                        .IsRequired()
                        .HasConstraintName("FK_Toeic_Part_4_ToeicExams");

                    b.Navigation("Toeic");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart5", b =>
                {
                    b.HasOne("EnglishCenter.Models.ToeicExam", "Toeic")
                        .WithMany("ToeicPart5s")
                        .HasForeignKey("ToeicId")
                        .IsRequired()
                        .HasConstraintName("FK_Toeic_Part_5_ToeicExams");

                    b.Navigation("Toeic");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart6", b =>
                {
                    b.HasOne("EnglishCenter.Models.ToeicExam", "Toeic")
                        .WithMany("ToeicPart6s")
                        .HasForeignKey("ToeicId")
                        .HasConstraintName("FK_Toeic_Part_6_ToeicExams");

                    b.Navigation("Toeic");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart7", b =>
                {
                    b.HasOne("EnglishCenter.Models.ToeicExam", "Toeic")
                        .WithMany("ToeicPart7s")
                        .HasForeignKey("ToeicId")
                        .HasConstraintName("FK_Toeic_Part_7_ToeicExams");

                    b.Navigation("Toeic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EnglishCenter.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EnglishCenter.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnglishCenter.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EnglishCenter.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EnglishCenter.Models.Course", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Enrollments");

                    b.Navigation("PreExamScores");
                });

            modelBuilder.Entity("EnglishCenter.Models.PreExamScore", b =>
                {
                    b.Navigation("StudentInClass");
                });

            modelBuilder.Entity("EnglishCenter.Models.Student", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("PreExamScores");
                });

            modelBuilder.Entity("EnglishCenter.Models.StudentInClass", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicExam", b =>
                {
                    b.Navigation("ToeicPart1s");

                    b.Navigation("ToeicPart2s");

                    b.Navigation("ToeicPart3s");

                    b.Navigation("ToeicPart4s");

                    b.Navigation("ToeicPart5s");

                    b.Navigation("ToeicPart6s");

                    b.Navigation("ToeicPart7s");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart3", b =>
                {
                    b.Navigation("SubQuestion3s");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart4", b =>
                {
                    b.Navigation("SubQuestion4s");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart6", b =>
                {
                    b.Navigation("SubQuestion6s");
                });

            modelBuilder.Entity("EnglishCenter.Models.ToeicPart7", b =>
                {
                    b.Navigation("SubQuestion7s");
                });

            modelBuilder.Entity("EnglishCenter.Models.User", b =>
                {
                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
